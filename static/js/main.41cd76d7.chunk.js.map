{"version":3,"sources":["App.js","index.js"],"names":["App","useState","cidade","setCidade","clima","setClima","obtendoClima","setObtendoClima","erro","setErro","erroGeo","setErroGeo","a","process","urlClima","fetch","then","response","json","data","cod","catch","error","console","log","message","useEffect","apigeo","latitude","longitude","url","results","components","city","country","navigator","geolocation","getCurrentPosition","position","obtemCidade","coords","code","Navbar","bg","Brand","href","Nav","className","Link","Form","inline","FormControl","type","value","placeholder","onChange","event","target","Button","variant","onClick","obtemClima","disabled","length","Spinner","size","animation","Jumbotron","Alert","onClose","dismissible","Heading","texto","Toast","delay","autohide","Header","ToastBody","Row","Card","name","main","temp","temp_min","temp_max","Body","Img","src","weather","icon","title","description","Title","Footer","Date","dt","toLocaleString","timeZone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41cd76d7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Toast from 'react-bootstrap/Toast';\nimport { ToastBody } from 'react-bootstrap';\nimport Alert from 'react-bootstrap/Alert';\nimport { FaCloudversify, FaCloudRain, FaArrowDown, FaArrowUp } from 'react-icons/fa'\n\n\nfunction App() {\n  const [cidade, setCidade] = useState('')\n  const [clima, setClima] = useState(null)\n  const [obtendoClima, setObtendoClima] = useState(false)\n  const [erro, setErro] = useState(null)\n  const [erroGeo, setErroGeo] = useState(null)\n\n  const listaErrosGeo = [{\"codigo\":1, \"texto\": \"N√£o foi dada permiss√£o para o sistema encontrar a sua localiza√ß√£o\"},{\"codigo\":2, \"texto\": \"N√£o foi possivel obter a sua localiza√ß√£o\"},{\"codigo\":3, \"texto\": \"O tempo para obter a sua localiza√ß√£o foi expirado\"}]\n\n  useEffect(() => {\n    const apigeo = process.env.REACT_APP_APIGEO\n\n    if('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        //console.log(position)\n        obtemCidade(position.coords.latitude, position.coords.longitude)\n      }, function (error){\n        console.error(error)\n        setErroGeo(error.code)\n      })\n    }\n\n    async function obtemCidade(latitude, longitude) {\n      let url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apigeo}`\n      await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        //console.log(data)\n        setCidade(data.results[0].components.city+','+data.results[0].components.country)\n      })\n      .catch(function(error){\n        console.error(`N√£o foi poss√≠vel buscar a cidade a partir da lat/long. Erro: ${error.message}`)\n      })\n    }\n\n\n  },[])\n\n  async function obtemClima(cidade) {\n    setObtendoClima(true)\n    const apiweather = process.env.REACT_APP_APIWEATHER\n    let urlClima = `http://api.openweathermap.org/data/2.5/weather?q=${cidade}&lang=pt&units=metric&appid=${apiweather}`\n\n    await fetch(urlClima)\n      .then(response => response.json())\n      .then(data => {\n        switch (data.cod) {\n          case '401':\n            setErro('A API Key informada √© inv√°lida')\n            setClima(null)\n            break\n          case '404':\n            setErro('A cidade informada n√£o existe')\n            setClima(null)\n            setCidade('')\n\n            break\n          case '429':\n            setErro('O uso gratuito da API foi excedido! (60 chamadas por minuto)')\n            setClima(null)\n            break\n          default:\n            setClima(data)\n        }\n      })\n      .catch(function (error) {\n        console.log(`Erro ao obter o clima: ${error.message}`)\n      })\n    setObtendoClima(false)\n  }\n\n  return (\n    <>  {/* React Fragment */}\n      <Navbar bg=\"primary\">\n        <Navbar.Brand href=\"#inicio\">FateClima</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#inicio\">In√≠cio</Nav.Link>\n          <Nav.Link href=\"#contato\">Contato</Nav.Link>\n        </Nav>\n        <Form inline>\n          <FormControl type=\"text\" value={cidade} placeholder=\"informe a cidade...\" onChange={event => setCidade(event.target.value)} /> &nbsp;\n        <Button variant=\"secondary\" onClick={() => { obtemClima(cidade) }} disabled={cidade.length < 3}>{obtendoClima ? <Spinner size=\"sm\" animation=\"border\"/>:<FaCloudversify/>}\n        Obter Clima</Button>\n        </Form>\n      </Navbar>\n      <Jumbotron>\n        <h1><FaCloudRain />FateClima</h1>\n        <p>\n          Consulte o clima de qualquer cidade do mundo. <br></br>\n        App desenvolvido em ReactJS e integrado com a API OpenWeatherMap.\n      </p>\n      </Jumbotron>\n      {erroGeo &&\n      <Alert variant=\"danger\" onClose={() => setErroGeo(null)} dismissible>\n        <Alert.Heading>Ops! Ocorreu um erro ao obter sua localiza√ß√£o</Alert.Heading>\n        <p>{listaErrosGeo[erroGeo].texto}</p>\n      </Alert>\n      }\n      {erro &&\n        <Toast onClose={() => setErro(null)} delay={4000} autohide className=\"bg-danger\">\n          <Toast.Header>\n            <strong className=\"mr-auto\">{erro}</strong>\n            <small>üòû</small>\n          </Toast.Header>\n          <ToastBody className=\"bg-white text-danger\">Por favor, fa√ßa uma nova busca</ToastBody>\n        </Toast>\n      }\n      {obtendoClima &&\n        <Row className=\"justify-content-center\">\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </Row>\n      }\n      <Row className=\"justify-content-center\">\n        {clima &&\n          <Card bg=\"primary\" className=\"text-center\">\n            <Card.Header>\n              <h2>{clima.name}</h2>\n              <h3><strong>{clima.main.temp}</strong>&#x2103;</h3>\n              <h5>min: <strong>{clima.main.temp_min}</strong>&#x2103;<FaArrowDown className=\"text-danger\" />  max: <strong>{clima.main.temp_max}</strong>&#x2103;<FaArrowUp className=\"text-success\" /></h5>\n            </Card.Header>\n            <Card.Body>\n              <Card.Img src={`http://openweathermap.org/img/wn/${clima.weather[0].icon}@4x.png`} title={clima.weather[0].description} />\n              <Card.Title className=\"text-light\">{clima.weather[0].description}</Card.Title>\n            </Card.Body>\n            <Card.Footer className=\"text-white\">\n              Atualizado em: {new Date(clima.dt * 1000).toLocaleString('pr-BR', { timeZone: 'America/Sao_Paulo' })}\n            </Card.Footer>\n          </Card>\n        }\n      </Row>\n    </>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}